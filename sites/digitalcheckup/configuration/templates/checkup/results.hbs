{{~#*inline "to_percentage"~}}{{round (multiply (divide (subtract score lower) (subtract upper lower)) 100) "up"}}{{~/inline~}}

{{~#*inline "score_respondent_overall"~}}{{> to_percentage score=@root.request.params.query.overall lower=-18 upper=136}}{{~/inline~}}

{{~#*inline "score_respondent_s1"~}}{{> to_percentage score=@root.request.params.query.s1 lower=-4 upper=20}}{{~/inline~}}

{{~#*inline "score_respondent_s2"~}}{{> to_percentage score=@root.request.params.query.s2 lower=-2 upper=35}}{{~/inline~}}

{{~#*inline "score_respondent_s3"~}}{{> to_percentage score=@root.request.params.query.s3 lower=-10 upper=66}}{{~/inline~}}

{{~#*inline "score_respondent_s4"~}}{{> to_percentage score=@root.request.params.query.s4 lower=-2 upper=15}}{{~/inline~}}

{{~#*inline "score_average_overall"~}}{{~#compare @root.request.params.query.income_band "===" "0"~}}{{round @root.data.supplimentaryResponses.data_averages.aggregations.total_stats.avg "up"}}{{else}}{{~#each @root.data.supplimentaryResponses.data_averages.aggregations.grouped_by_income_band.buckets~}}{{~#compare this.key "===" @root.request.params.query.income_band~}}{{round this.total_stats.avg "up"}}{{~/compare~}}{{~/each~}}{{~/compare~}}{{~/inline~}}

{{~#*inline "score_average_s1"~}}{{~#compare @root.request.params.query.income_band "===" "0" ~}}{{round @root.data.supplimentaryResponses.data_averages.aggregations.leadership_culture_and_skills_stats.avg "up"}}{{else}}{{~#each @root.data.supplimentaryResponses.data_averages.aggregations.grouped_by_income_band.buckets ~}}{{~#compare this.key "===" @root.request.params.query.income_band ~}}{{round this.leadership_culture_and_skills_stats.avg "up"}}{{~/compare ~}}{{~/each ~}}{{~/compare~}}{{~/inline~}}

{{~#*inline "score_average_s2"~}}{{~#compare @root.request.params.query.income_band "===" "0" ~}}{{round @root.data.supplimentaryResponses.data_averages.aggregations.tools_and_equipment_stats.avg "up"}}{{else}}{{~#each @root.data.supplimentaryResponses.data_averages.aggregations.grouped_by_income_band.buckets ~}}{{~#compare this.key "===" @root.request.params.query.income_band ~}}{{round this.tools_and_equipment_stats.avg "up"}}{{~/compare ~}}{{~/each ~}}{{~/compare~}}{{~/inline~}}

{{~#*inline "score_average_s3"~}}{{~#compare @root.request.params.query.income_band "===" "0" ~}}{{round @root.data.supplimentaryResponses.data_averages.aggregations.content_marketing_and_data_stats.avg "up"}}{{else}}{{~#each @root.data.supplimentaryResponses.data_averages.aggregations.grouped_by_income_band.buckets ~}}{{~#compare this.key "===" @root.request.params.query.income_band ~}}{{round this.content_marketing_and_data_stats.avg "up"}}{{~/compare ~}}{{~/each ~}}{{~/compare~}}{{~/inline~}}

{{~#*inline "score_average_s4"~}}{{~#compare @root.request.params.query.income_band "===" "0" ~}}{{round @root.data.supplimentaryResponses.data_averages.aggregations.cyber_resilience_stats.avg "up"}}{{else}}{{~#each @root.data.supplimentaryResponses.data_averages.aggregations.grouped_by_income_band.buckets ~}}{{~#compare this.key "===" @root.request.params.query.income_band ~}}{{round this.cyber_resilience_stats.avg "up"}}{{~/compare ~}}{{~/each ~}}{{~/compare~}}{{~/inline~}}

<div class="checkup-section b-padding-full" id="checkup-results">
  <div class="checkup-section-header b-padding-full v-margin-full">
    <div class="container-fluid">
      <div class="container-content">
        {{> checkup_progress progress=100}}
        <h1 class="mdc-typography--headline3">
          {{#if @root.request.params.query.web_organisation ~}}
          Checkup results for {{@root.request.params.query.web_organisation}}
          {{else}}
          Your checkup results
          {{/if ~}}
        </h1>
      </div>
    </div>
  </div>
  <div class="container-fluid">
    <div class="container-content">
      <div class="question-block mdc-elevation--z3">
        <div class="results-block">
          <div class="mdc-layout-grid t-margin-full">
            <div class="mdc-layout-grid__inner">
              <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-3-desktop mdc-layout-grid__cell--span-3-tablet mdc-layout-grid__cell--span-4-phone result result-overall">
                <div class="mdc-typography--headline6">
                  Your overall score
                </div>
                <div class="score score-respondent">
                  {{> score_respondent_overall}}%
                </div>
              </div>
              <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-9-desktop mdc-layout-grid__cell--span-5-tablet mdc-layout-grid__cell--span-4-phone result result-average">
                <div class="mdc-typography--headline6">
                  Average score
                </div>
                <div class="score">
                  {{> score_average_overall}}%
                  {{#compare @root.request.params.query.income_band "!==" "0" ~}}
                  {{#each @root.data.supplimentaryResponses.data_averages.aggregations.grouped_by_income_band.buckets ~}}
                  {{#compare this.key "===" @root.request.params.query.income_band ~}}
                  <span class="mdc-typography--body2">
                    (compared with {{this.doc_count}} organisations in the same income bracket)
                  </span>
                  {{/compare ~}}
                  {{/each ~}}
                  {{/compare ~}}
                </div>
              </div>
            </div>
          </div>

          {{#if @root.request.params.query.overall ~}}
          <div class="mdc-layout-grid">
            <div class="mdc-layout-grid__inner">
              <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-8-desktop mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-4-phone">
                <div class="radarChart"></div>

                <div class="t-margin-full t-padding-full mdc-typography--headline5">
                  Congratulations for scoring above the average but please don't let that make you complacent.
                </div>
              </div>
              <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4-desktop mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-4-phone">
                <div class="key">
                  <ul>
                    <li class="key-your">Your scores</li>
                    <li class="key-average">Average scores</li>
                  </ul>
                </div>

                <div class="mdc-typography--body1">
                  Leadership, culture and skills
                  <div class="scores mdc-typography--caption">
                    <span class="score score-respondent">
                      {{> score_respondent_s1}}%
                    </span>
                    <span class="score">
                      {{> score_average_s1}}%
                    </span>
                  </div>
                </div>
                <div class="mdc-typography--body1">
                  Tools and equipment
                  <div class="scores mdc-typography--caption">
                    <span class="score score-respondent">
                      {{> score_respondent_s2}}%
                    </span>
                    <span class="score">
                      {{> score_average_s2}}%
                    </span>
                  </div>
                </div>
                <div class="mdc-typography--body1">
                  Content, marketing and data
                  <div class="scores mdc-typography--caption">
                    <span class="score score-respondent">
                      {{> score_respondent_s3}}%
                    </span>
                    <span class="score">
                      {{> score_average_s3}}%
                    </span>
                  </div>
                </div>
                <div class="mdc-typography--body1">
                  Cyber resilience
                  <div class="scores mdc-typography--caption">
                    <span class="score score-respondent">
                      {{> score_respondent_s4}}%
                    </span>
                    <span class="score">
                      {{> score_average_s4}}%
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          {{/if ~}}
        </div>
      </div>

      <div class="v-padding-full">
        <div class="v-margin-full b-padding-full">
          <h3 class="mdc-typography--headline4 v-margin b-padding-full">
            We would love to discuss your results and next steps
          </h3>

          <div class="cta">
            <!-- Calendly link widget begin -->
            <link href="https://assets.calendly.com/assets/external/widget.css" rel="stylesheet">
            <script src="https://assets.calendly.com/assets/external/widget.js" type="text/javascript"></script>
            <a href="" onclick="Calendly.showPopupWidget('https://calendly.com/john-fitzgerald/check-up');return false;" class="mdc-button mdc-button--raised">
              <span class="fas fa-phone fa-fw mdc-list-item__graphic" aria-hidden="true"></span>
              Book a follow-up call
            </a>
            <!-- Calendly link widget end -->
            {{#compare @root.route.name "checkup_results_scotland" ~}}
            <div class="mdc-typography--body1 t-margin-full">
              <a href="https://scvo.org/digital/about">Sign up to our e-bulletin</a> to get details of our events, training and other support for digital change.
            </div>
            {{/compare ~}}
          </div>
        </div>
      </div>

      <!-- Calendly inline widget begin - ->
      <div class="calendly-inline-widget" data-url="https://calendly.com/john-fitzgerald/check-up" style="width:100%;height:620px;"></div>
      <script type="text/javascript" src="https://assets.calendly.com/assets/external/widget.js"></script>
      <!- - Calendly inline widget end -->
    </div>
  </div>

  {{#if @root.request.params.query.topic ~}}
  {{#compare @root.request.params.query.topic "===" "leadership" ~}}
  <div class="checkup-topic-header checkup-topic-header-{{@root.request.params.query.topic}}">
    <div class="container-fluid">
      <div class="container-content">
        <div class="mdc-layout-grid">
          <div class="mdc-layout-grid__inner">
            <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-desktop mdc-layout-grid__cell--span-1-tablet mdc-layout-grid__cell--span-1-phone">
              <img src="{{~>asset_url url=(concat 'images/icons/' @root.request.params.query.topic '.png')~}}" class="icon" />
            </div>
            <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-10-desktop mdc-layout-grid__cell--span-7-tablet mdc-layout-grid__cell--span-3-phone">
              <div class="mdc-typography--body2">Focus on</div>
              <div class="mdc-typography--headline3">
                Leaderhip & culture
              </div>
              <div class="mdc-typography--body1">
                You scored {{> score_respondent_s1}}% - the average is {{> score_average_s1}}%
                {{#compare @root.request.params.query.income_band "!==" "0" ~}}
                {{#each @root.data.supplimentaryResponses.data_averages.aggregations.grouped_by_income_band.buckets ~}}
                {{#compare this.key "===" @root.request.params.query.income_band ~}}
                (based on {{this.doc_count}} organisations in the same income bracket)
                {{/compare ~}}
                {{/each ~}}
                {{/compare ~}}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  {{else}}
  {{#compare @root.request.params.query.topic "===" "tools" ~}}
  <div class="checkup-topic-header checkup-topic-header-{{@root.request.params.query.topic}}">
    <div class="container-fluid">
      <div class="container-content">
        <div class="mdc-layout-grid">
          <div class="mdc-layout-grid__inner">
            <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-desktop mdc-layout-grid__cell--span-1-tablet mdc-layout-grid__cell--span-1-phone">
              <img src="{{~>asset_url url=(concat 'images/icons/' @root.request.params.query.topic '.png')~}}" class="icon" />
            </div>
            <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-10-desktop mdc-layout-grid__cell--span-7-tablet mdc-layout-grid__cell--span-3-phone">
              <div class="mdc-typography--body2">Focus on</div>
              <div class="mdc-typography--headline3">
                Tools & equipment
              </div>
              <div class="mdc-typography--body1">
                You scored {{> score_respondent_s2}}% - the average is {{> score_average_s2}}%
                {{#compare @root.request.params.query.income_band "!==" "0" ~}}
                {{#each @root.data.supplimentaryResponses.data_averages.aggregations.grouped_by_income_band.buckets ~}}
                {{#compare this.key "===" @root.request.params.query.income_band ~}}
                (based on {{this.doc_count}} organisations in the same income bracket)
                {{/compare ~}}
                {{/each ~}}
                {{/compare ~}}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  {{else}}
  {{#compare @root.request.params.query.topic "===" "data" ~}}
  <div class="checkup-topic-header checkup-topic-header-{{@root.request.params.query.topic}}">
    <div class="container-fluid">
      <div class="container-content">
        <div class="mdc-layout-grid">
          <div class="mdc-layout-grid__inner">
            <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-desktop mdc-layout-grid__cell--span-1-tablet mdc-layout-grid__cell--span-1-phone">
              <img src="{{~>asset_url url='images/icons/content.png'~}}" class="icon" />
            </div>
            <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-10-desktop mdc-layout-grid__cell--span-7-tablet mdc-layout-grid__cell--span-3-phone">
              <div class="mdc-typography--body2">Focus on</div>
              <div class="mdc-typography--headline3">
                Content, marketing & data
              </div>
              <div class="mdc-typography--body1">
                You scored {{> score_respondent_s3}}% - the average is {{> score_average_s3}}%
                {{#compare @root.request.params.query.income_band "!==" "0" ~}}
                {{#each @root.data.supplimentaryResponses.data_averages.aggregations.grouped_by_income_band.buckets ~}}
                {{#compare this.key "===" @root.request.params.query.income_band ~}}
                (based on {{this.doc_count}} organisations in the same income bracket)
                {{/compare ~}}
                {{/each ~}}
                {{/compare ~}}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  {{else}}
  {{#compare @root.request.params.query.topic "===" "cyber" ~}}
  <div class="checkup-topic-header checkup-topic-header-{{@root.request.params.query.topic}}">
    <div class="container-fluid">
      <div class="container-content">
        <div class="mdc-layout-grid">
          <div class="mdc-layout-grid__inner">
            <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-2-desktop mdc-layout-grid__cell--span-1-tablet mdc-layout-grid__cell--span-1-phone">
              <img src="{{~>asset_url url=(concat 'images/icons/' @root.request.params.query.topic '.png')~}}" class="icon" />
            </div>
            <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-10-desktop mdc-layout-grid__cell--span-7-tablet mdc-layout-grid__cell--span-3-phone">
              <div class="mdc-typography--body2">Focus on</div>
              <div class="mdc-typography--headline3">
                Cyber security
              </div>
              <div class="mdc-typography--body1">
                You scored {{> score_respondent_s4}}% - the average is {{> score_average_s4}}%
                {{#compare @root.request.params.query.income_band "!==" "0" ~}}
                {{#each @root.data.supplimentaryResponses.data_averages.aggregations.grouped_by_income_band.buckets ~}}
                {{#compare this.key "===" @root.request.params.query.income_band ~}}
                (based on {{this.doc_count}} organisations in the same income bracket)
                {{/compare ~}}
                {{/each ~}}
                {{/compare ~}}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  {{else}}
  <!-- Could not determine topic -->
  {{/compare ~}}
  {{/compare ~}}
  {{/compare ~}}
  {{/compare ~}}
  {{/if ~}}
  {{#compare @root.data.supplimentaryResponses.resources.hits.total ">" 0 ~}}
  <div class="container-fluid v-margin-full v-padding-full">
    <div class="container-content">
      <div class="mdc-layout-grid equal-height checkup-topic-resources-{{@root.request.params.query.topic}}">
        <div class="mdc-layout-grid__inner">
          {{#each @root.data.supplimentaryResponses.resources.hits.hits ~}}
          <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-4-desktop mdc-layout-grid__cell--span-4-tablet mdc-layout-grid__cell--span-4-phone">
            {{#with _source ~}}
            <div class="mdc-card mdc-elevation--z3 x-padding-full">
              <div class="mdc-card__title">
                <div class="mdc-typography--headline5">
                  <a href="{{link}}">{{{title}}}</a>
                </div>
              </div>
              <div class="mdc-card__primary">
                <div class="mdc-typography--body1">
                  {{{content}}}
                </div>
              </div>
              <div class="mdc-card__actions">
                <a href="{{link}}" class="mdc-card__action">Read more</a>
              </div>
            </div>
            {{/with ~}}
          </div>
          {{/each ~}}
        </div>
      </div>
    </div>
  </div>
  {{/compare ~}}
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js" charset="utf-8"></script>
<script>

/////////////////////////////////////////////////////////
/////////////// The Radar Chart Function ////////////////
/////////////// Written by Nadieh Bremer ////////////////
////////////////// VisualCinnamon.com ///////////////////
/////////// Inspired by the code of alangrafu ///////////
/////////////////////////////////////////////////////////

function RadarChart(id, data, options) {
  var cfg = {
    w: 600,				//Width of the circle
    h: 600,				//Height of the circle
    margin: {top: 5, right: 5, bottom: 5, left: 5}, //The margins of the SVG
    levels: 4,				//How many levels or inner circles should there be drawn
    maxValue: 0, 			//What is the value that the biggest circle will represent
    labelFactor: 1.2, 	//How much farther than the radius of the outer circle should the labels be placed
    wrapWidth: 60, 		//The number of pixels after which a label needs to be given a new line
    opacityArea: 0.25, 	//The opacity of the area of the blob
    dotRadius: 10, 			//The size of the colored circles of each blog
    opacityCircles: 0, 	//The opacity of the circles of each blob
    strokeWidth: 3, 		//The width of the stroke around each blob
    roundStrokes: false,	//If true the area and stroke will follow a round path (cardinal-closed)
    color: d3.scale.category10()	//Color function
  };

  //Put all of the options into a variable called cfg
  if('undefined' !== typeof options){
    for(var i in options){
      if('undefined' !== typeof options[i]){ cfg[i] = options[i]; }
    }//for i
  }//if

  //If the supplied maxValue is smaller than the actual one, replace by the max in the data
  var maxValue = Math.max(cfg.maxValue, d3.max(data, function(i){return d3.max(i.map(function(o){return o.value;}))}));

  var allAxis = (data[0].map(function(i, j){return i.axis})),	//Names of each axis
  total = allAxis.length,					//The number of different axes
  radius = Math.min(cfg.w/2, cfg.h/2), 	//Radius of the outermost circle
  Format = d3.format('%'),			 	//Percentage formatting
  angleSlice = Math.PI * 2 / total;		//The width in radians of each "slice"

  //Scale for the radius
  var rScale = d3.scale.linear()
  .range([0, radius])
  .domain([0, maxValue]);

  /////////////////////////////////////////////////////////
  //////////// Create the container SVG and g /////////////
  /////////////////////////////////////////////////////////

  //Remove whatever chart with the same id/class was present before
  d3.select(id).select("svg").remove();

  //Initiate the radar chart SVG
  var svg = d3.select(id).append("svg")
  .attr("width",  cfg.w + cfg.margin.left + cfg.margin.right)
  .attr("height", cfg.h + cfg.margin.top + cfg.margin.bottom)
  .attr("class", "radar"+id);
  //Append a g element
  var g = svg.append("g")
  .attr("transform", "translate(" + (cfg.w/2 + cfg.margin.left) + "," + (cfg.h/2 + cfg.margin.top) + ")");

  /////////////////////////////////////////////////////////
  ////////// Glow filter for some extra pizzazz ///////////
  /////////////////////////////////////////////////////////

  // //Filter for the outside glow
  // var filter = g.append('defs').append('filter').attr('id','glow'),
  // feGaussianBlur = filter.append('feGaussianBlur').attr('stdDeviation','2.5').attr('result','coloredBlur'),
  // feMerge = filter.append('feMerge'),
  // feMergeNode_1 = feMerge.append('feMergeNode').attr('in','coloredBlur'),
  // feMergeNode_2 = feMerge.append('feMergeNode').attr('in','SourceGraphic');

  /////////////////////////////////////////////////////////
  /////////////// Draw the Circular grid //////////////////
  /////////////////////////////////////////////////////////

  //Wrapper for the grid & axes
  var axisGrid = g.append("g").attr("class", "axisWrapper");

  //Draw the background circles
  axisGrid.selectAll(".levels")
  .data(d3.range(1,(cfg.levels+1)).reverse())
  .enter()
  .append("circle")
  .attr("class", "gridCircle")
  .attr("r", function(d, i){return radius/cfg.levels*d;})
  .style("fill", "#B8B8B8")
  .style("stroke", "#B8B8B8")
  .style("fill-opacity", cfg.opacityCircles)
  // .style("filter" , "url(#glow)");

  //Text indicating at what % each level is
  axisGrid.selectAll(".axisLabel")
  .data(d3.range(1,(cfg.levels+1)).reverse())
  .enter().append("text")
  .attr("class", "axisLabel")
  .attr("x", 4)
  .attr("y", function(d){return -d*radius/cfg.levels;})
  .attr("dy", "0.4em")
  .style("font-size", "10px")
  .attr("fill", "#B8B8B8")
  .text(function(d,i) { return Format(maxValue * d/cfg.levels); });

  /////////////////////////////////////////////////////////
  //////////////////// Draw the axes //////////////////////
  /////////////////////////////////////////////////////////

  //Create the straight lines radiating outward from the center
  var axis = axisGrid.selectAll(".axis")
  .data(allAxis)
  .enter()
  .append("g")
  .attr("class", "axis");
  //Append the lines
  axis.append("line")
  .attr("x1", 0)
  .attr("y1", 0)
  .attr("x2", function(d, i){ return rScale(maxValue*1.1) * Math.cos(angleSlice*i - Math.PI/2); })
  .attr("y2", function(d, i){ return rScale(maxValue*1.1) * Math.sin(angleSlice*i - Math.PI/2); })
  .attr("class", "line")
  .style("stroke", "#B8B8B8")
  .style("stroke-width", "1px");

  //Append the labels at each axis
  axis.append("text")
  .attr("class", "legend")
  .style("font-size", "1rem")
  .style("font-variant", "all-small-caps")
  .attr("text-anchor", "middle")
  .attr("dy", "0.35em")
  .attr("x", function(d, i){ return rScale(maxValue * cfg.labelFactor) * Math.cos(angleSlice*i - Math.PI/2); })
  .attr("y", function(d, i){ return rScale(maxValue * cfg.labelFactor) * Math.sin(angleSlice*i - Math.PI/2); })
  .text(function(d){return d})
  .call(wrap, cfg.wrapWidth);

  /////////////////////////////////////////////////////////
  ///////////// Draw the radar chart blobs ////////////////
  /////////////////////////////////////////////////////////

  //The radial line function
  var radarLine = d3.svg.line.radial()
  .interpolate("linear-closed")
  .radius(function(d) { return rScale(d.value); })
  .angle(function(d,i) {	return i*angleSlice; });

  if(cfg.roundStrokes) {
    radarLine.interpolate("cardinal-closed");
  }

  //Create a wrapper for the blobs
  var blobWrapper = g.selectAll(".radarWrapper")
  .data(data)
  .enter().append("g")
  .attr("class", "radarWrapper");

  //Append the backgrounds
  blobWrapper
  .append("path")
  .attr("class", "radarArea")
  .attr("d", function(d,i) { return radarLine(d); })
  .style("fill", function(d,i) { return cfg.color(i); })
  .style("fill-opacity", function(d,i) { return cfg.fillOpacity(i); })
  // .on('mouseover', function (d,i){
  //   //Dim all blobs
  //   d3.selectAll(".radarArea")
  //   .transition().duration(200)
  //   .style("fill-opacity", 0.1);
  //   // //Bring back the hovered over blob
  //   // d3.select(this)
  //   // .transition().duration(200)
  //   // .style("fill-opacity", 0.4);
  // })
  // .on('mouseout', function(){
  //   //Bring back all blobs
  //   d3.selectAll(".radarArea")
  //   .transition().duration(200)
  //   .style("fill-opacity", cfg.opacityArea);
  // });

  //Create the outlines
  blobWrapper.append("path")
  .attr("class", "radarStroke")
  .attr("d", function(d,i) { return radarLine(d); })
  .style("stroke-width", cfg.strokeWidth + "px")
  .style("stroke-dasharray", function(d,i) { return cfg.strokeStyle(i); })
  .style("stroke", function(d,i) { return cfg.color(i); })
  .style("fill", "none")
  // .style("filter" , "url(#glow)");

  //Append the circles
  blobWrapper.selectAll(".radarCircle")
  .data(function(d,i) { return d; })
  .enter().append("circle")
  .attr("class", "radarCircle")
  .attr("r", cfg.dotRadius)
  .attr("cx", function(d,i){ return rScale(d.value) * Math.cos(angleSlice*i - Math.PI/2); })
  .attr("cy", function(d,i){ return rScale(d.value) * Math.sin(angleSlice*i - Math.PI/2); })
  .style("stroke-width", cfg.strokeWidth + "px")
  .style("stroke-dasharray", function(d,i,j) { return cfg.strokeStyle(j); })
  .style("stroke", function(d,i,j) { return cfg.color(j); })
  .style("fill", function(d,i,j) { return cfg.dotColor(j); })
  .style("fill-opacity", 1);

  /////////////////////////////////////////////////////////
  //////// Append invisible circles for tooltip ///////////
  /////////////////////////////////////////////////////////

  // //Wrapper for the invisible circles on top
  // var blobCircleWrapper = g.selectAll(".radarCircleWrapper")
  // .data(data)
  // .enter().append("g")
  // .attr("class", "radarCircleWrapper");
  //
  // //Append a set of invisible circles on top for the mouseover pop-up
  // blobCircleWrapper.selectAll(".radarInvisibleCircle")
  // .data(function(d,i) { return d; })
  // .enter().append("circle")
  // .attr("class", "radarInvisibleCircle")
  // .attr("r", cfg.dotRadius*1.5)
  // .attr("cx", function(d,i){ return rScale(d.value) * Math.cos(angleSlice*i - Math.PI/2); })
  // .attr("cy", function(d,i){ return rScale(d.value) * Math.sin(angleSlice*i - Math.PI/2); })
  // .style("fill", "none")
  // .style("pointer-events", "all")
  // .on("mouseover", function(d,i) {
  //   newX =  parseFloat(d3.select(this).attr('cx')) - 14;
  //   newY =  parseFloat(d3.select(this).attr('cy')) - 18;
  //
  //   tooltip
  //   .attr('x', newX)
  //   .attr('y', newY)
  //   .text(Format(d.value))
  //   .transition().duration(200)
  //   .style('opacity', 1);
  // })
  // .on("mouseout", function(){
  //   tooltip.transition().duration(200)
  //   .style("opacity", 0);
  // });
  //
  // //Set up the small tooltip for when you hover over a circle
  // var tooltip = g.append("text")
  // .attr("class", "tooltip")
  // .style("opacity", 0);

  /////////////////////////////////////////////////////////
  /////////////////// Helper Function /////////////////////
  /////////////////////////////////////////////////////////

  //Taken from http://bl.ocks.org/mbostock/7555321
  //Wraps SVG text
  function wrap(text, width) {
    text.each(function() {
      var text = d3.select(this),
      words = text.text().split(/\s+/).reverse(),
      word,
      line = [],
      lineNumber = 0,
      lineHeight = 1.4, // ems
      y = text.attr("y"),
      x = text.attr("x"),
      dy = parseFloat(text.attr("dy")),
      tspan = text.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", dy + "em");

      while (word = words.pop()) {
        line.push(word);
        tspan.text(line.join(" "));
        if (tspan.node().getComputedTextLength() > width) {
          line.pop();
          tspan.text(line.join(" "));
          line = [word];
          tspan = text.append("tspan").attr("x", x).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
        }
      }
    });
  }//wrap

}//RadarChart
</script>
<script>

/* Radar chart design created by Nadieh Bremer - VisualCinnamon.com */

//////////////////////////////////////////////////////////////
//////////////////////// Set-Up //////////////////////////////
//////////////////////////////////////////////////////////////

var margin = {top: 75, right: 75, bottom: 20, left: 75},
width = Math.min(700, window.innerWidth - 10) - margin.left - margin.right,
height = Math.min(width, window.innerHeight - margin.top - margin.bottom - 20);

//////////////////////////////////////////////////////////////
////////////////////////// Data //////////////////////////////
//////////////////////////////////////////////////////////////

var data = [
  [//Average scores
    {
      axis:"Overall",
      value:{{> score_average_overall}}/100
    },
    {
      axis:"Leadership",
      value:{{> score_average_s1}}/100
    },
    {
      axis:"Tools",
      value:{{> score_average_s2}}/100
    },
    {
      axis:"Data",
      value:{{> score_average_s3}}/100
    },
    {
      axis:"Cyber",
      value:{{> score_average_s4}}/100
    }
  ],[//Your scores
    {
      axis:"Overall",
      value:{{> score_respondent_overall}}/100
    },
    {
      axis:"Leadership",
      value:{{> score_respondent_s1}}/100
    },
    {
      axis:"Tools",
      value:{{> score_respondent_s2}}/100
    },
    {
      axis:"Data",
      value:{{> score_respondent_s3}}/100
    },
    {
      axis:"Cyber",
      value:{{> score_respondent_s4}}/100
    }
  ]
];
//////////////////////////////////////////////////////////////
//////////////////// Draw the Chart //////////////////////////
//////////////////////////////////////////////////////////////

var color = d3.scale.ordinal()
.range(["#444444","#1976D2"]);
var dotColor = d3.scale.ordinal()
.range(["#ffffff","#1976D2"]);
var fillOpacity = d3.scale.ordinal()
.range(["0","0.1"]);
var strokeStyle = d3.scale.ordinal()
.range(["4,3","0"]);

var radarChartOptions = {
  w: width,
  h: height,
  margin: margin,
  maxValue: 0,
  levels: 5,
  roundStrokes: true,
  color: color,
  dotColor: dotColor,
  fillOpacity: fillOpacity,
  strokeStyle: strokeStyle
};
//Call function to draw the Radar chart
RadarChart(".radarChart", data, radarChartOptions);
</script>