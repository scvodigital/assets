<div class="mdc-layout-grid">
  <div class="mdc-layout-grid__inner title">
    <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-8-desktop mdc-layout-grid__cell--span-6-tablet mdc-layout-grid__cell--span-4-phone">
      <h1>Essential Digital Skills: Your Results</h1>
      <p>
        Thanks for taking the Essential Digital Skills survey. If your skills aren't what you'd like them to be, you can find more resources on improving them here:
      </p>
      <ul>
        <li><a href="http://www.letsgetonline.scot">Letâ€™s Get Online</a></li>
        <li><a href="http://www.learnmyway.com">Learn My Way</a></li>
        <li><a href="http://www.digitalunite.com">Digital Unite</a></li>
        <li><a href="http://www.learndigital.withgoogle.com/digitalgarage">Google Garage</a></li>
      </ul>
    </div>
    <div class="mdc-layout-grid__cell hide-on-small-only mdc-layout-grid__cell--span-4-desktop mdc-layout-grid__cell--span-6-tablet mdc-layout-grid__cell--span-4-phone">
      <div class="radarChart responsive-img pull-right" style="margin-top:3rem;background-image:url('{{> asset_url url='images/toolkit-essential-wheel.png'}}');background-repeat: no-repeat;background-position:center center;height:320px;width:320px;"></div>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js" charset="utf-8"></script>
<script>

//Practically all this code comes from https://github.com/alangrafu/radar-chart-d3
//I only made some additions and aesthetic adjustments to make the chart look better
//(of course, that is only my point of view)
//Such as a better placement of the titles at each line end,
//adding numbers that reflect what each circular level stands for
//Not placing the last level and slight differences in color
//
//For a bit of extra information check the blog about it:
//http://nbremer.blogspot.nl/2013/09/making-d3-radar-chart-look-bit-better.html

var RadarChart = {
  draw: function(id, d, options){
    var cfg = {
      radius: 5,
      w: 320,
      h: 320,
      factor: 1,
      factorLegend: .85,
      levels: 3,
      maxValue: 0,
      radians: 2 * Math.PI,
      opacityArea: 0,
      ToRight: 5,
      TranslateX: 0,
      TranslateY: 0,
      ExtraWidthX: 0,
      ExtraWidthY: 0,
      color: d3.scale.category10()
    };

    if('undefined' !== typeof options){
      for(var i in options){
        if('undefined' !== typeof options[i]){
          cfg[i] = options[i];
        }
      }
    }
    cfg.maxValue = Math.max(cfg.maxValue, d3.max(d, function(i){return d3.max(i.map(function(o){return o.value;}))}));
    var allAxis = (d[0].map(function(i, j){return i.axis}));
    var total = allAxis.length;
    var radius = cfg.factor*Math.min(cfg.w/2, cfg.h/2);
    var Format = d3.format('');
    d3.select(id).select("svg").remove();

    var g = d3.select(id)
    .append("svg")
    .attr("width", cfg.w+cfg.ExtraWidthX)
    .attr("height", cfg.h+cfg.ExtraWidthY)
    .append("g")
    .attr("transform", "translate(" + cfg.TranslateX + "," + cfg.TranslateY + ")");
    ;

    var tooltip;

    //Circular segments
    g.selectAll(".levels")
    .data(d3.range(1,(cfg.levels+1)).reverse())
    .enter()
    .append("circle")
    .attr("class", "gridCircle")
    .attr("r", function(d, i){return radius/cfg.levels*d;})
    .style("stroke", "#8FC9DC")
    .style("stroke-opacity", "1")
    .style("stroke-width", "1px")
    .style("fill-opacity", "0")
    .attr("transform", "translate(" + (cfg.w/2) + ", " + (cfg.h/2) + ")");
    ;

    series = 0;

    var axis = g.selectAll(".axis")
    .data(allAxis)
    .enter()
    .append("g")
    .attr("class", "axis");

    axis.append("line")
    .attr("x1", cfg.w/2)
    .attr("y1", cfg.h/2)
    .attr("x2", function(d, i){return cfg.w/2*(1-cfg.factor*Math.sin(i*cfg.radians/total));})
    .attr("y2", function(d, i){return cfg.h/2*(1-cfg.factor*Math.cos(i*cfg.radians/total));})
    .attr("class", "line")
    .style("stroke", "#8FC9DC")
    .style("stroke-width", "1px");

    d.forEach(function(y, x){
      dataValues = [];
      g.selectAll(".nodes")
      .data(y, function(j, i){
        dataValues.push([
          cfg.w/2*(1-(parseFloat(Math.max(j.value, 0))/cfg.maxValue)*cfg.factor*Math.sin(i*cfg.radians/total)),
          cfg.h/2*(1-(parseFloat(Math.max(j.value, 0))/cfg.maxValue)*cfg.factor*Math.cos(i*cfg.radians/total))
        ]);
      });
      dataValues.push(dataValues[0]);
      g.selectAll(".area")
      .data([dataValues])
      .enter()
      .append("polygon")
      .attr("class", "radar-chart-serie"+series)
      .style("stroke-width", "2px")
      .style("stroke", "white")
      .attr("points",function(d) {
        var str="";
        for(var pti=0;pti<d.length;pti++){
          str=str+d[pti][0]+","+d[pti][1]+" ";
        }
        return str;
      })
      .style("fill", function(j, i){return "white"})
      .style("fill-opacity", "0")
      .on('mouseover', function (d){
        z = "polygon."+d3.select(this).attr("class");
        g.selectAll("polygon")
        .transition(200)
        .style("fill-opacity", cfg.opacityArea);
        g.selectAll(z)
        .transition(200)
        .style("fill-opacity", cfg.opacityArea);
      })
      .on('mouseout', function(){
        g.selectAll("polygon")
        .transition(200)
        .style("fill-opacity", cfg.opacityArea);
      });
      series++;
    });
    series=0;


    d.forEach(function(y, x){
      g.selectAll(".nodes")
      .data(y).enter()
      .append("svg:circle")
      .attr("class", "radar-chart-serie"+series)
      .attr('r', cfg.radius)
      .attr("alt", function(j){return Math.max(j.value, 0)})
      .attr("cx", function(j, i){
        dataValues.push([
          cfg.w/2*(1-(parseFloat(Math.max(j.value, 0))/cfg.maxValue)*cfg.factor*Math.sin(i*cfg.radians/total)),
          cfg.h/2*(1-(parseFloat(Math.max(j.value, 0))/cfg.maxValue)*cfg.factor*Math.cos(i*cfg.radians/total))
        ]);
        return cfg.w/2*(1-(Math.max(j.value, 0)/cfg.maxValue)*cfg.factor*Math.sin(i*cfg.radians/total));
      })
      .attr("cy", function(j, i){
        return cfg.h/2*(1-(Math.max(j.value, 0)/cfg.maxValue)*cfg.factor*Math.cos(i*cfg.radians/total));
      })
      .attr("data-id", function(j){return j.axis})
      .style("fill", "white").style("fill-opacity", 1)
      .append("svg:title")
      .text(function(j){return Math.max(j.value, 0)});

      series++;
    });
  }
};

</script>
<script>

var colorscale = d3.scale.category10();

//Data
var d = [
  [
    {
      axis: "Communicating",
      value: {{#compare @root.request.params.query.type "===" "work"}}{{@root.request.params.query.s1w}}{{else}}{{@root.request.params.query.s1}}{{/compare}}
    },
    {
      axis: "Staying safe",
      value: {{#compare @root.request.params.query.type "===" "work"}}{{@root.request.params.query.s5w}}{{else}}{{@root.request.params.query.s5}}{{/compare}}
    },
    {
      axis: "Transacting",
      value: {{#compare @root.request.params.query.type "===" "work"}}{{@root.request.params.query.s4w}}{{else}}{{@root.request.params.query.s4}}{{/compare}}
    },
    {
      axis: "Problem solving",
      value: {{#compare @root.request.params.query.type "===" "work"}}{{@root.request.params.query.s3w}}{{else}}{{@root.request.params.query.s3}}{{/compare}}
    },
    {
      axis: "Handling info",
      value: {{#compare @root.request.params.query.type "===" "work"}}{{@root.request.params.query.s2w}}{{else}}{{@root.request.params.query.s2}}{{/compare}}
    }
  ]
];

//Options for the Radar chart, other than default
var mycfg = {
  w: 240,
  h: 240,
  maxValue: 3,
  levels: 3,
  TranslateX: 40,
  TranslateY: 40,
  ExtraWidthX: 80,
  ExtraWidthY: 80
}

//Call function to draw the Radar chart
RadarChart.draw(".radarChart", d, mycfg);

////////////////////////////////////////////
/////////// Initiate legend ////////////////
////////////////////////////////////////////

var svg = d3.select('#body')
.selectAll('svg')
.append('svg')
.attr("width", w)
.attr("height", h)

</script>